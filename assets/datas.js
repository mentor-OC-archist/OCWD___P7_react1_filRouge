const jsonDatas = {
    P1C2_SC: {
        h: "Transformez un simple fichier HTML en app React"
        , p: `Exploitez les liens CDN`
        , liens: [""]
        , copypaste: ""
        , begin: ""
        , sol: "https://codepen.io/nicolaspatschkowski/pen/wvzQevq"
        , tasks: {
            p: ``
            , ol: [
                `
                  ....TODOList tasks....
                `
            ]
        }
    },
    P1C2: {
        h: "Cr√©ez votre premier composant"
        , p: `Attachez React √† votre HTML`
        , liens: [""]
        , copypaste: ""
        , begin: "https://codepen.io/nicolaspatschkowski/pen/ExgrqLV"
        , sol: ["https://codepen.io/nicolaspatschkowski/pen/vYXVqod", "https://codepen.io/nicolaspatschkowski/pen/gOwQRbm"]
        , tasks: {
            p: `Je vous avais parl√© au chapitre pr√©c√©dent d'un exercice fil rouge qui nous accompagnerait tout au long de ce cours. Vous vous en souvenez ? Nous allons cr√©er ensemble un site pour un magasin de plantes, La maison jungle ! 

            Il est temps de mettre en pratique ce que vous venez de voir.
            Votre mission, si vous l'acceptez, est la suivante :`
            , ol: [
                `Cr√©er le premier composant Header qui contient le nom de notre magasin : La maison jungle. Le composant Header correspond √† une balise h1  .`
                , `L'int√©grer dans un √©l√©ment HTML qui aura pour id "root".`
            ]
        }
    },
    P1C3: {
        h: "Initiez-vous au JSX"
        , p: [`Composez vos composants`, "Manipulez des donn√©es dans vos composants JSX"]
        , liens: [""]
        , copypaste: ""
        , begin: "https://codepen.io/nicolaspatschkowski/pen/JjRmgdJ"
        , sol: "https://codepen.io/nicolaspatschkowski/pen/MWjPNaa"
        , tasks: {
            p: `Vous avez appris plein de choses dans ce chapitre, bravo ! C'est maintenant l'occasion de les mettre en pratique.`
            , ol: [
                `R√©utiliser le composant Banner de ce chapitre qui pr√©sente le nom de notre boutique. Vous devez sortir le titre dans une variable JavaScript : le titre doit initialement √™tre en minuscules et √™tre transform√© en majuscules avec du JavaScript.`
                , `Cr√©er un composant <Cart /> (panier) qui viendra sous notre titre.`
                , `Le panier contient 3 plantes : un monstera, un lierre et un bouquet de fleurs.`
                , `Cr√©er 3 variables pour les prix des plantes : le monstera co√ªte 8, le lierre co√ªte 10, et le bouquet de fleurs co√ªte 15.`
                , `Le panier contient une liste (<ul> üòâ), et chaque √©l√©ment pr√©sente le nom de l'article, et le prix.`
                , `Le total du panier additionne les trois prix.`
            ]
        }
    },
    P2C1: {
        h: "Organisez votre code"
        , p: ``
        , liens: [""]
        , copypaste: ""
        , begin: "https://codepen.io/atoulmet/pen/YzWMvWP"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C1-Solution"
        , tasks: {
            p: `Vous pouvez commencer l‚Äôexercice √† partir de la base de code que nous avons cr√©√©e ensemble avec Create React App.
            Votre mission est la suivante : importer le composant Cart que vous aviez cr√©√© dans l‚Äôexercice du chapitre pr√©c√©dent dans un fichier √† part, dans le dossier /components.`
            , ol: [
                ``
            ]
        }
    },
    P2C2: {
        h: "Incorporez du style et des assets √† votre projet"
        , p: `D√©couvrez l'attribut style`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C2-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C2-Solution"
        , tasks: {
            p: `Ici, vous allez devoir styliser votre panier. Pour √ßa, cr√©ez d‚Äôabord une classe  lmj-cart. Votre panier doit avoir :`
            , ol: [
                `un padding de 32 px ;`
                , `du texte blanc ;`
                , `et un background-color √† #31b572.`
            ]
        }
    },
    P2C3_1: {
        h: "It√©rez sur votre contenu"
        , p: `D√©couvrez votre alli√© :  map(); et Pr√©cisez votre key`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Begin-1"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Solution-1"
        , tasks: {
            p: `Vous verrez dans  ShoppingList.js   une liste de plantes import√©e depuis  /datas   qui s'appelle  plantList, et qui comporte des cat√©gories pour chacune des plantes.
            √Ä partir de cette liste de plantes, vous devrez :`
            , ol: [
                `Constituer une nouvelle liste de mani√®re dynamique qui extrait les cat√©gories uniques de plantes (que nous utiliserons √©galement plus tard). `
                , `Il existe plusieurs solutions pour cr√©er une liste d'√©l√©ments uniques, mais je vous conseille de vous pencher sur la m√©thode reduce()  ou bienforEach().`
                , `Afficher la liste des cat√©gories de plantes au-dessus de la liste des plantes √† vendre.`
            ]
        }
    },
    P2C3_2: {
        h: "Contextualisez le contenu de vos composants"
        , p: `Cr√©ez des conditions dans le JSX; et Ouvrez-vous √† d'autres m√©thodes`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Begin-2"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Solution-2"
        , tasks: {
            p: `J'en ai profit√© pour rajouter un peu de CSS dans  ShoppingList.css, afin qu'on y voie un peu plus clair. ‚ú®
            <br/>J'ai √©galement ajout√© une variable  isSpecialOffer   √†  true   pour les plantes qui sont en promotion. Votre mission est d'afficher un √©l√©ment  div  qui contient le mot ‚ÄúSoldes‚Äù si la plante est en promotion. Vous pouvez lui passer la classe  lmj-sales  pour lui ajouter du style.
            <br/>Vous √™tes libre de choisir l‚Äôune des m√©thodes vues dans le chapitre pour cr√©er votre affichage conditionnel.`
            , ol: []
        }
    },
    P2C3_SC: {
        h: "Ouvrez-vous √† d'autres m√©thodes"
        , p: `React est particuli√®rement flexible : il existe d'autres m√©thodes permettant de contextualiser votre contenu. Je vais vous en montrer quelques-unes dans le screencast ci-dessous :`
        , liens: ["https://player.vimeo.com/video/503077386?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Screencast"
        , sol: ""
        , tasks: {
            p: ``
            , ol: []
        }
    },
    P2C3_EX: {
        h: "Cr√©ez des conditions dans le JSX"
        , p: `Donc‚Ä¶ Nous avons d√©j√† vu le ternaire. Maintenant qu'on a une app compl√®te pour nous faire la main, moi, √ßa me donne envie de le mettre en application dans notre site de plantes. ü§ì
        Dans notre liste de plantes  plantList.js, je vais rajouter une cat√©gorie  isBestSale   correspondant √† un  bool√©en   qui nous indique si notre plante fait partie des meilleures ventes. Ce qui nous donne pour le premier √©l√©ment :`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C3-Exercice-conditions"
        , sol: ""
        , tasks: {
            p: `Maintenant que nous avons notre bool√©en, nous allons utiliser un ternaire pour afficher un emoji en fonction. Dans  ShoppingList.js, au niveau de l'affichage du nom, je rajoute :`
            , ol: [
                `{
                    name: 'monstera',
                    category: 'classique',
                    id: '1ed',
                    isBestSale: true
                },`
                , `{plantList.map((plant) => (
                    <li key={ plant.id }>
                        {plant.isBestSale ? <span>üî•</span> : <span>üëé</span>}
                    </li>
                ))}`
                , `../../assets/P2C3_EX.png`
            ]
        }
    },
    P2C4: {
        h: "R√©utilisez vos composants avec les props"
        , p: `Vous allez cr√©er un composant PlantItem qui sera un composant enfant de ShoppingList.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C4-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C4-Solution"
        , tasks: {
            p: `Les props  name   et  cover   seront utilis√©es directement dans PlantItem.
            light   et  water, que nous avons d√©j√† cr√©√©es ensemble, seront pass√©es au composant  CareScale   dans  PlantItem.
            Vous trouverez dans  styles/PlantItem.css   les classes CSS  lmj-plant-item-cover   et  lmj-plant-item   qui vous aideront √† cr√©er de beaux composants ü§©. Je vous propose √©galement de remplacer nos emojis par les ic√¥nes 'sun' et 'water' que vous trouverez dans  /assets.
            <br/> PlantItem prend en props :`
            , ol: [
                `name   pour le nom de la plante ;`
                , `cover   pour l'image correspondante ;`
                , `id   qui correspond √† l'item de chaque √©l√©ment ;`
                , `light ;`
                , `water.`
            ]
        }
    },
    P2C4_EX: {
        h: "Familiarisez-vous avec la syntaxe"
        , p: `Et si je vous disais que vous avez d√©j√† utilis√© une prop ? Eh oui, la prop  key   dans le chapitre sur les listes ! Vous avez donc d√©j√† vu la syntaxe.
        Revenons √† notre site de plantes. Nous allons maintenant cr√©er un nouveau composant qui va √™tre r√©utilis√©. L'id√©e est de cr√©er une √©chelle d'arrosage et une √©chelle de luminosit√© pour chaque plante.`
        , liens: ["https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135822-reutilisez-vos-composants-avec-les-props#/id/r-7135656"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C4-Exercice"
        , sol: ""
        , tasks: {
            p: [
                ``
                , ``
            ]
            , ol: [
                `
                  ....TODOList tasks....
                `
            ]
        }
    },
    P2C5: {
        h: "Interagissez avec vos composants gr√¢ce aux √©v√©nements"
        , p: `Vous allez maintenant pouvoir mettre tout √ßa en application. Comme d'habitude, vous trouverez la base de code pour commencer l'exercice sur P2C5-Begin.`
        , liens: ["https://react-hook-form.com/"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C5-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C5-Solution"
        , tasks: {
            p: `Cette fois-ci, voil√† une petite to do de ce que vous pouvez faire pour enrichir notre app :`
            , ol: [
                `Cr√©er une alerte qui se d√©clenche au clic sur le composant CareScale qui devra dire :`
                , [`"Cette plante requiert peu/mod√©rement/beaucoup de lumi√®re/d'arrosage" en fonction de la donn√©e correspondante ;`
                    , `s'il s'agit d'un composant CareScale de type "water" ou de type "light".`
                ]
                , `Vous trouverez dans la base de code un nouveau composant : Footer. Vous devez y ajouter :`
                , [`un input pour r√©cup√©rer le mail de l'utilisateur, en appliquant la m√©thode de composant contr√¥l√©. La syntaxe du state que nous avons utilis√©e dans ce chapitre pour  inputValue   et  setInputValue   qui utilise useState est d'ailleurs d√©j√† √©crite dans la base de code ;`
                    , `l'√©v√©nement  blur   (quand on clique en dehors du champ) qui d√©clenche une alerte si inputValue ne contient pas le caract√®re "@". Cette alerte devra pr√©ciser "Attention, il n'y a pas d'@, ceci n'est pas une adresse valide.‚Äù`
                ]
            ]
        }
    },
    P2C5_EX: {
        h: "Familiarisez-vous avec la syntaxe"
        , p: `....Pr√©ambule de l'exercice....`
        , liens: ["https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7135875"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P2C5-Exercice"
        , sol: ""
        , tasks: {
            p: `Quelques caract√©ristiques de la d√©claration d'un √©v√©nement en React :`
            , ol: [
                `l'√©v√©nement s'√©crit dans une balise encamelCase;`
                , `vous d√©clarez l'√©v√©nement √† capter, et lui passez entre accolades la fonction √† appeler ;`
                , `contrairement au JS, dans la quasi totalit√© des cas, vous n'avez pas besoin d'utiliser addEventListener`
            ]
        }
    }
    , P3C1: {
        h: "Mettez en place votre state local avec useState"
        , p: ``
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C1-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C1-Solution"
        , tasks: {
            p: `Pour ce chapitre, vous devrez cr√©er un bouton "vider le panier" qui r√©initialise le state de notre  cart.`
            , ol: []
        }
    }
    , P3C1_SC: {
        h: "????????????????????"
        , p: ``
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/blob/P3C1-Screencast/src/components/PlantItem.js"
        , sol: ""
        , tasks: {
            p: ``
            , ol: []
        }
    }
    , P3C1_EX: {
        h: "Familiarisez-vous avec useState"
        , p: `Nous allons encore am√©liorer notre panier. Cette fois-ci, je veux pouvoir choisir de l'afficher ou de le cacher. Pour √ßa, nous allons utiliser une variable d'√©tat dans notre composant Cart.`
        , liens: ["https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7137536-mettez-en-place-votre-state-local-avec-usestate#/id/r-7137542"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/blob/P3C1-Exercices/src/components/PlantItem.js"
        , sol: ""
        , tasks: {
            p: ``
            , ol: [
                `Comprenez les crochets (en destructuring)`
                , `Cr√©ez plusieurs variables d'√©tat`
            ]
        }
    }
    , P3C2: {
        h: "Partagez votre state entre diff√©rents composants"
        , p: `Faites remonter l'√©tat et mettez-le √† jour depuis vos composants enfants`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C2-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C2-Solution"
        , tasks: {
            p: `L'objectif ici est de reprendre notre liste de cat√©gories et de l'am√©liorer avec le state. Pour cela, voil√† ce que vous allez faire :`
            , ol: [
                `Cr√©er  un composant √† part,  Categories  , pour g√©rer les cat√©gories.`
                , `Afficher la liste dans  un menu d√©roulant <select /> avec des <options /> :`
                , `chaque cat√©gorie devient une option. Il est possible de choisir une cat√©gorie ;`
                , `√† la s√©lection d'une cat√©gorie, seules les plantes correspondant √† la cat√©gorie s√©lectionn√©e s'affichent.`
                , `Cr√©er √©galement un bouton ayant pour label "R√©initialiser". Ce bouton permet de r√©initialiser votre state, et d'afficher toutes les cat√©gories de plantes.`
                , `Vous pouvez ajouter une option qui a pour valeur une string vide lorsqu'aucune cat√©gorie n'est s√©lectionn√©e.`
            ]
        }
    }
    , P3C2_SC: {
        h: "Faites remonter l'√©tat et mettez-le √† jour depuis vos composants enfants"
        , p: ``
        , liens: ["https://player.vimeo.com/video/503077394?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C2-Screencast-Begin/"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C2-Screencast-Solution/"
        , tasks: {
            p: ``
            , ol: [
                ``
            ]
        }
    }
    , P3C3: {
        h: "D√©clenchez des effets avec useEffect"
        , p: `D√©couvrez useEffect; et Pr√©cisez quand d√©clencher un effet avec le tableau de d√©pendances`
        , liens: ["https://developer.mozilla.org/fr/docs/Web/API/Window/localStorage", "https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/stringify", "https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/parse"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C3-Begin"
        , sol: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C3-Solution"
        , tasks: {
            p: `Ici, vous allez permettre √† l'utilisateur de garder son panier, m√™me lorsqu'il rafra√Æchit la page. Pour cela, nous allons utiliser localStorage. Afin d'assurer la meilleure exp√©rience utilisateur possible, vous devez : `
            , ol: [
                `sauvegarder le panier √† chaque modification avec  localStorage.setItem()  . Attention, le cart √©tant maintenant un objet, il vous faudra passer par  JSON.stringify   (vous avez la documentation ici) puis  JSON.parse   (et √† nouveau la doc ici) ;`
                , `vous assurer que le panier n'est pas sauvegard√© plus de fois que n√©cessaire ;`
                , `r√©cup√©rer le panier au premier chargement de la page avec  localStorage.getItem.`
            ]
        }
    }
    , P3C3_SC: {
        h: "Ma√Ætrisez les r√®gles de useEffect"
        , p: `Int√©grez les diff√©rentes √©tapes de useEffect`
        , liens: ["https://player.vimeo.com/video/503077429?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C3-Screencast-Begin"
        , sol: ""
        , tasks: {
            p: `Repassons sur ce qu‚Äôon vient de voir de useEffect et d‚Äôautres utilisations dans cette vid√©o !`
            , ol: []
        }
    }
}